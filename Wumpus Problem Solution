#Wumpus World Problem

n=4
pits=set()
wumpus=set()
visited=[]
dir={'left':(0,-1),'right':(0,1),'up':(-1,0),'down':(1,0)}
result=[]

#check is tile safe or not
def is_safe(world,i,j):
    if (i,j) in pits:
        return False
    if (i,j) in wumpus:
        return False
    if ('pit' in world[i][j]):
        return False
    if ('wumpus' in world[i][j]):
        return False
    return True

#when agent smells breeze or stench it checks adjacent blocks for wumpus or pits
def checkADJ(world,i,j):
    for key in dir.keys():
        x=i+dir[key][0]
        y=j+dir[key][1]
        if x>=0 and y>=0 and x<n and y<n and ('pit' in world[x][y]):
            pits.add((x,y))
        elif x>=0 and y>=0 and x<n and y<n and ('wumpus' in world[x][y]):
            wumpus.add((x,y))

#it generates all possible solutions for problem
def backtrack(world,i,j,solution):
    if not is_safe(world,i,j):
        return
    if ('breeze' in world[i][j]) or ('stench' in world[i][j]):
        checkADJ(world,i,j)
    if 'glitter' in world[i][j]:
        result.append(solution.copy())
        return
    visited.append((i,j))
    for key in dir.keys():
        x=i+dir[key][0]
        y=j+dir[key][1]
        if x>=0 and y>=0 and x<n and y<n and (x,y) not in visited:
            solution.append(key)
            backtrack(world,x,y,solution)
            solution.pop()

if __name__=='__main__':
    world=[[('stench'),(),('breeze'),('pit')],
           [('wumpus'),('stench','breeze','glitter'),('pit'),('breeze')],
           [('stench'),(),('breeze'),()],
           [('agent'),('breeze'),('pit'),('breeze')]]
    
    solution=[]
    backtrack(world,3,0,solution)
    print('pits=',pits)
    print('wumpus=',wumpus)
    print('Solutions:')
    for sol in result:
        print(sol)
